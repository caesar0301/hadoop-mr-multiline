{"name":"Mrmlf","tagline":"MultilineInputFormat (MLF) for hadoop MapReduce (v2).","body":"About mrmlf\r\n===========\r\n\r\nThis library provides an extended input format, namely **MultilineInputFormat**\r\nbased on new interfaces of Hadoop Mapreduce.\r\n\r\nData Target\r\n-----------\r\n\r\nBasically, default input formats in Hadoop are based on line-specific text\r\nfiles or separater-aware binary formats (e.g., SequenceFile or avro format).\r\nOne of important data formats in real world is in the **multiple-line form**\r\nwhere one integrated record is split into multiple natural lines (separated by\r\n`\\r` or `\\n`). For exmpale, the music CD meta data in the illustrating program:\r\n\r\n    <CD>\r\n        <TITLE>Empire Burlesque</TITLE>\r\n        <ARTIST>Bob Dylan</ARTIST>\r\n        <COUNTRY>USA</COUNTRY>\r\n        <COMPANY>Columbia</COMPANY>\r\n        <PRICE>10.90</PRICE>\r\n        <YEAR>1985</YEAR>\r\n    </CD>\r\n    <CD>\r\n        <TITLE>Hide your heart</TITLE>\r\n        <ARTIST>Bonnie Tyler</ARTIST>\r\n        <COUNTRY>UK</COUNTRY>\r\n        <COMPANY>CBS Records</COMPANY>\r\n        <PRICE>9.90</PRICE>\r\n        <YEAR>1988</YEAR>\r\n    </CD>\r\n\r\nThis library manipulates the problem of this kind of data, and restores the\r\nmultiple-line content as a unified record for mapreduce programs. That is, the\r\nCD metadata in the above example will be converted into two records.\r\n\r\nProgramming Integration\r\n-----------------------\r\n\r\nYou can use this extended file input format as the way invoking other default\r\nformats. Here we give a minimum configuration in MR program. The complete\r\nsample source code is located at\r\n`sjtu.omnilab.hadoop.mrtest.MultilineInputFormatSample.java` of the library.\r\n\r\n    public final class MultilineInputFormatSample extends Configured {\r\n\r\n        @Override\r\n        public int run(String[] args) throws Exception {\r\n            // Create a new MR job configuration\r\n            job = ...\r\n\r\n            // Invoke MLF class\r\n            job.setInputFormatClass(MultilineInputFormat.class);\r\n            MultilineInputFormat.setMultilineStartString(job, \"<CD>\");\r\n            MultilineInputFormat.setMultilineEndString(job, \"</CD>\");\r\n\r\n            // Set map output KV classes\r\n            job.setMapOutputKeyClass(LongWritable.class);\r\n            job.setMapOutputValueClass(TextArrayWritable.class);\r\n            ...\r\n        }\r\n    }\r\n\r\nMore about Record Separation\r\n----------------------------\r\n\r\nThere are two principle methods to determine the behavior of MLF, i.e.,\r\n`MultilineInputFormat.setMultilineStartString` and\r\n`MultilineInputFormat.setMultilineEndString`. The former tells the library\r\nwhere the record beginning is and latter the record ending.\r\n\r\n**Note:** Both methods are on the basis of natural lines and determine whether\r\n  to split or not by matching the first characters in each line (including\r\n  spacing characters like whitespaces and tabs).\r\n\r\nContact\r\n-------\r\n\r\nÂ© Xiaming Chen -- chenxm35@gmail.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}